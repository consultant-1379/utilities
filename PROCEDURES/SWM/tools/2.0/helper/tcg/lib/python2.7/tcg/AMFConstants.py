AMFCOMPONENTTYPE_DEFAULT_PREFIX         = "/"
AMFCOMPONENTTYPE_CONFIGFILE             = "AMF-ComponentType.xml"
AMFMONITORINGTYPE_CONFIGFILE            = "AMF-MonitoringType.xml"
AMFSERVICEGROUPTYPE_CONFIGFILE          = "AMF-ServiceGroupType.xml"
AMFSERVICEUNITTYPE_CONFIGFILE           = "AMF-ServiceUnitType.xml"
AMFSERVICETYPE_CONFIGFILE               = "AMF-ServiceType.xml"

SA_AMF_2N_REDUNDANCY_MODEL              = "1"
SA_AMF_NM_REDUNDANCY_MODEL              = "2"
SA_AMF_NW_REDUNDANCY_MODEL              = "3"
SA_AMF_NWA_REDUNDANCY_MODEL             = "4"
SA_AMF_NR_REDUNDANCY_MODEL              = "5"

REDUNDANCY_MODEL_NAME_2N                = "2N"
REDUNDANCY_MODEL_NAME_NM                = "NM"
REDUNDANCY_MODEL_NAME_NW                = "NW"
REDUNDANCY_MODEL_NAME_NWA               = "NWA"
REDUNDANCY_MODEL_NAME_NR                = "NR"
VALID_REDUNDANCY_MODEL_NAME = [REDUNDANCY_MODEL_NAME_2N, REDUNDANCY_MODEL_NAME_NM, REDUNDANCY_MODEL_NAME_NW, REDUNDANCY_MODEL_NAME_NWA, REDUNDANCY_MODEL_NAME_NR]

def getRedundancyModelNumber(redundancyModelString):
    return eval("SA_AMF_" + redundancyModelString.upper() + "_REDUNDANCY_MODEL")

def getRedundancyModelShortName(redundancyNumber):
    shortNames = { SA_AMF_2N_REDUNDANCY_MODEL  :  REDUNDANCY_MODEL_NAME_2N,
                   SA_AMF_NM_REDUNDANCY_MODEL  :  REDUNDANCY_MODEL_NAME_NM,
                   SA_AMF_NW_REDUNDANCY_MODEL  :  REDUNDANCY_MODEL_NAME_NW,
                   SA_AMF_NWA_REDUNDANCY_MODEL :  REDUNDANCY_MODEL_NAME_NWA,
                   SA_AMF_NR_REDUNDANCY_MODEL :  REDUNDANCY_MODEL_NAME_NR }
    return shortNames[redundancyNumber]

def isValidRedundancyModelName(redundancyModelString):
    validNames = [ REDUNDANCY_MODEL_NAME_2N,
                   REDUNDANCY_MODEL_NAME_NM,
                   REDUNDANCY_MODEL_NAME_NW,
                   REDUNDANCY_MODEL_NAME_NWA,
                   REDUNDANCY_MODEL_NAME_NR ]
    return redundancyModelString.upper() in validNames


SA_AMF_COMP_X_ACTIVE_AND_Y_STANDBY      = "1"
SA_AMF_COMP_X_ACTIVE_OR_Y_STANDBY       = "2"
SA_AMF_COMP_ONE_ACTIVE_OR_Y_STANDBY     = "3"
SA_AMF_COMP_ONE_ACTIVE_OR_ONE_STANDBY   = "4"
SA_AMF_COMP_X_ACTIVE                    = "5"
SA_AMF_COMP_1_ACTIVE                    = "6"
SA_AMF_COMP_NON_PRE_INSTANTIABLE        = "7"

CAPABILITY_NAME_X_ACTIVE_AND_Y_STANDBY      = "X_ACTIVE_AND_Y_STANDBY"
CAPABILITY_NAME_X_ACTIVE_OR_Y_STANDBY       = "X_ACTIVE_OR_Y_STANDBY"
CAPABILITY_NAME_ONE_ACTIVE_OR_Y_STANDBY     = "ONE_ACTIVE_OR_Y_STANDBY"
CAPABILITY_NAME_ONE_ACTIVE_OR_ONE_STANDBY   = "ONE_ACTIVE_OR_ONE_STANDBY"
CAPABILITY_NAME_X_ACTIVE                    = "X-ACTIVE"
CAPABILITY_NAME_1_ACTIVE                    = "1-ACTIVE"
CAPABILITY_NAME_NON_PRE_INSTANTIABLE        = "NON_PRE_INSTANTIABLE"

def isValidCapabilityName(capabilityString):
    validNames = [ CAPABILITY_NAME_X_ACTIVE_AND_Y_STANDBY,
                   CAPABILITY_NAME_X_ACTIVE_OR_Y_STANDBY,
                   CAPABILITY_NAME_ONE_ACTIVE_OR_Y_STANDBY,
                   CAPABILITY_NAME_ONE_ACTIVE_OR_ONE_STANDBY,
                   CAPABILITY_NAME_X_ACTIVE,
                   CAPABILITY_NAME_1_ACTIVE,
                   CAPABILITY_NAME_NON_PRE_INSTANTIABLE ]
    return capabilityString in validNames

def getCapabilityNumber(capabilityString):
    values = { CAPABILITY_NAME_X_ACTIVE_AND_Y_STANDBY       : SA_AMF_COMP_X_ACTIVE_AND_Y_STANDBY,
               CAPABILITY_NAME_X_ACTIVE_OR_Y_STANDBY        : SA_AMF_COMP_X_ACTIVE_OR_Y_STANDBY,
               CAPABILITY_NAME_ONE_ACTIVE_OR_Y_STANDBY      : SA_AMF_COMP_ONE_ACTIVE_OR_Y_STANDBY,
               CAPABILITY_NAME_ONE_ACTIVE_OR_ONE_STANDBY    : SA_AMF_COMP_ONE_ACTIVE_OR_ONE_STANDBY,
               CAPABILITY_NAME_X_ACTIVE                     : SA_AMF_COMP_X_ACTIVE,
               CAPABILITY_NAME_1_ACTIVE                     : SA_AMF_COMP_1_ACTIVE,
               CAPABILITY_NAME_NON_PRE_INSTANTIABLE         : SA_AMF_COMP_NON_PRE_INSTANTIABLE }
    return values[capabilityString]

SA_AMF_COMP_SA_AWARE    = 0x0001
SA_AMF_COMP_PROXY       = 0x0002
SA_AMF_COMP_PROXIED     = 0x0004
SA_AMF_COMP_LOCAL       = 0x0008
SA_AMF_COMP_CONTAINER   = 0x0010
SA_AMF_COMP_CONTAINED   = 0x0020
SA_AMF_COMP_PROXIED_NPI = 0x0040

CATEGORY_NAME_SA_AWARE      = "SA-AWARE"
CATEGORY_NAME_PROXY         = "PROXY"
CATEGORY_NAME_PROXIED       = "PROXIED"
CATEGORY_NAME_LOCAL         = "LOCAL"
CATEGORY_NAME_CONTAINER     = "CONTAINER"
CATEGORY_NAME_CONTAINED     = "CONTAINED"
CATEGORY_NAME_PROXIED_NPI   = "PROXIED-NPI"
CATEGORY_NAME_EXTERNAL      = "EXTERNAL"
CATEGORY_NAME_EXTERNAL_NPI  = "EXTERNAL-NPI"
CATEGORY_NAME_LIBRARY       = "LIBRARY"
CATEGORY_NAME_NATIVE        = "NATIVE"


HEALTHMONITOR_NAME_INTERNAL = "INTERNAL"
HEALTHMONITOR_NAME_EXTERNAL = "EXTERNAL"
HEALTHMONITOR_NAME_OTHER = "OTHER"


def isValidHealthMonitorName(healthMonitorString):
    validNames = [ HEALTHMONITOR_NAME_INTERNAL,
                   HEALTHMONITOR_NAME_EXTERNAL,
                   HEALTHMONITOR_NAME_OTHER ]
    return healthMonitorString in validNames

BOOLEAN_NAME_TRUE   = "SA_TRUE"
BOOLEAN_NAME_FALSE  = "SA_FALSE"

def isValidBooleanName(booleanString):
    validNames = [ BOOLEAN_NAME_TRUE,
                   BOOLEAN_NAME_FALSE ]
    return booleanString in validNames

def getBooleanNumber(booleanString):
    if booleanString == BOOLEAN_NAME_TRUE:
        return "1"
    elif booleanString == BOOLEAN_NAME_FALSE:
        return "0"
    else:
        assert(0)

SA_AMF_NO_RECOMMENDATION    = "1"
SA_AMF_COMPONENT_RESTART    = "2"
SA_AMF_COMPONENT_FAILOVER   = "3"
SA_AMF_NODE_SWITCHOVER      = "4"
SA_AMF_NODE_FAILOVER        = "5"
SA_AMF_NODE_FAILFAST        = "6"
SA_AMF_CLUSTER_RESET        = "7"
SA_AMF_APPLICATION_RESTART  = "8"
SA_AMF_CONTAINER_RESTART    = "9"

RECOVERY_ON_ERROR_NAME_NO_RECOMMENDATION    = "SA_AMF_NO_RECOMMENDATION"
RECOVERY_ON_ERROR_NAME_COMPONENT_RESTART    = "SA_AMF_COMPONENT_RESTART"
RECOVERY_ON_ERROR_NAME_COMPONENT_FAILOVER   = "SA_AMF_COMPONENT_FAILOVER"
RECOVERY_ON_ERROR_NAME_NODE_SWITCHOVER      = "SA_AMF_NODE_SWITCHOVER"
RECOVERY_ON_ERROR_NAME_NODE_FAILOVER        = "SA_AMF_NODE_FAILOVER"
RECOVERY_ON_ERROR_NAME_NODE_FAILFAST        = "SA_AMF_NODE_FAILFAST"
RECOVERY_ON_ERROR_NAME_CLUSTER_RESET        = "SA_AMF_CLUSTER_RESET"
RECOVERY_ON_ERROR_NAME_APPLICATION_RESTART  = "SA_AMF_APPLICATION_RESTART"
RECOVERY_ON_ERROR_NAME_CONTAINER_RESTART    = "SA_AMF_CONTAINER_RESTART"

def isValidRecoveryOnErrorName(recoveryString):
    validNames = [ RECOVERY_ON_ERROR_NAME_NO_RECOMMENDATION,
                   RECOVERY_ON_ERROR_NAME_COMPONENT_RESTART,
                   RECOVERY_ON_ERROR_NAME_COMPONENT_FAILOVER,
                   RECOVERY_ON_ERROR_NAME_NODE_SWITCHOVER,
                   RECOVERY_ON_ERROR_NAME_NODE_FAILOVER,
                   RECOVERY_ON_ERROR_NAME_NODE_FAILFAST,
                   RECOVERY_ON_ERROR_NAME_CLUSTER_RESET,
                   RECOVERY_ON_ERROR_NAME_APPLICATION_RESTART,
                   RECOVERY_ON_ERROR_NAME_CONTAINER_RESTART ]
    return recoveryString in validNames

def getRecoveryOnErrorNumber(recoveryString):
    return eval(recoveryString)

# Administrative state operations
ADMIN_UNLOCK_INSTANTIATION = "SA_AMF_ADMIN_UNLOCK_INSTANTIATION"
ADMIN_LOCK_INSTANTIATION = "SA_AMF_ADMIN_LOCK_INSTANTIATION"
ADMIN_UNLOCK = "SA_AMF_ADMIN_UNLOCK"
ADMIN_LOCK = "SA_AMF_ADMIN_LOCK"

# Administrative states
SA_AMF_ADMIN_UNLOCKED              = "1"
SA_AMF_ADMIN_LOCKED                = "2"
SA_AMF_ADMIN_LOCKED_INSTANTIATION  = "3"
SA_AMF_ADMIN_SHUTTING_DOWN         = "4"

